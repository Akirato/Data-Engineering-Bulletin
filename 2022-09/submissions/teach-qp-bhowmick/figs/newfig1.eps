%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: newfig1.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: ChenPeng
%%CreationDate: 2022/5/10, 21:48:15
%%BoundingBox: 0 0 878 202
%%HiResBoundingBox: 0 0 877.5253 201.5995
%%CropBox: 0 0 877.5253 201.5995
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1084 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® LTSC"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® LTSC"
   xmp:CreateDate="2022-05-10T21:46:20+08:00"
   xmp:ModifyDate="2022-05-10T21:48+08:00"
   xmp:MetadataDate="2022-05-10T21:48+08:00"
   xmpMM:DocumentID="uuid:E997C2E9-2C58-4E66-B008-77F3C791919B"
   xmpMM:InstanceID="uuid:5e0b9c78-4bf1-4067-b347-dc4972731deb">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Chen Peng</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -201.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 201.6 li
877.525 201.6 li
877.525 0 li
cp
clp
gsave
-.63623 202 mo
878.364 202 li
878.364 -.999756 li
-.63623 -.999756 li
cp
clp
-43.6362 396 mo
916.364 396 li
916.364 -144 li
-43.6362 -144 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
.949 sep
%ADOBeginSubsetFont: GAAAAA+Consolas Initial
ct_T42Dict begin
-0.43 -0.301 0.676 1.008
 256 array 0 1 255 {1 index exch /.notdef put} for  /GAAAAA+Consolas
Type42DictBegin
[<00010000000c000c000c000c4f532f324d5093c2000000cc000000606376
7420ec4ccc7b0000012c000005466670676d4f2e51f50000067400000d2a
676c79662d20017200007b4c00007b0868656164f38d2165000013a00000
00366868656109480af7000013d800000024686d74789a9634ef000013fc
00002c486c6f63618399656e00004044000017ae6d617870192519730000
57f4000000206e616d65e8133d690000581400000a9870726570301acfbe
000062ac0000189f67646972000000000000000000000000000304660190
00050008059a05330000011f059a0533000003d1006602000809020b0609
020204030204e00006ff0000fcff00000001000000004d53202000400000
fb0205f1fdf1015e075c02026000019fdfd7000003ec051b000000200003
0000076c0337fe5c0000000000000000000000000000005200660073008a
009600a600d501080133014d0073008500a000ae00c100ca00f00106011d
014c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000051b00120000ffeefe7ffffbff2905f2fee5fe5c
0617ff0605d7ff1403ec00120000ffee0585000cfe66fff6fe7ffed9ff29
04c3fe5cff000666ff29fff002400008051b00120000ffee047b0012ff29
fff80566058505a805d10337fe2900000000079e00000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000004d0052005f00650066006a0066006c0070006a
005c005d005e00640069007000710073007400760079007a007b007d006e
0077007b007e0082008300860088006e007300770079007a007b007f0081
008300870089008b008c008d008e008f00810082008500870088008b008d
008e008f0089008d008f007f0081008200830085008600870089008a008b
008c008d008e008f00910093009600980099009a009b0090009100920093
009400950096009700980099009a009b009c009d00910093009400950096
009700980099009a009c0090009100920093009400950096009700980099
009a009b009c009d009e009f00a000a100a200a400a600a800aa00ae009e
009f00a000a200a400a600a800aa00ab00ac00af00b1009e00a200a600a8
00ae00d500d500e100fe00fb00fc00ef00f10108010a0112011a0133013d
014d014e0065006800730074005c005e006e0075006f0076007300900091
007f00800085008a008b007d00870088007f008600880089008b00900091
00920081008400850086008700880089008a008c008d008e008f00910092
009400950098009e00a400a600930099009c009d00a000a100a200a300a4
00a600940095009600980099009a009b009c009d009e009f00a000a300a4
00a500a6009400950096009700980099009a009b009c009d009e009f00a0
00a200a300a400a500a600a900ab00b000b200b300b400b600b700ac00ae
00af00b200b400b500ac00a700a800a900aa00ab00ac00ad00ae00b000b1
00b200b300b400b500b600b700a800aa00ab00ac00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ba00bb00bc00bd00c100b800b900bc
00b800b900ba00bb00bc00bd00be00c400b800b900ba00bc00bd00be00c1
00c300c400c500c600c700cc00cd00d500d700c700c800cb00d100d200d3
00d500d700d900e200ee00fa00df00e700ef00dd00e100e500e600e800eb
00ec00ee00ef00f000f100f600fc00fc00fe00fc01060108010a012d0112
0119011d012501330139014c000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0096000000000000000000000000000000000000026201cc02f8fdfe075c
000000000000000005850593033d024c0000fff0005c005c008efe600000
000c0630060b05fa05ef000b0535000a051b02cefff601d306e400090614
0415fff60057006200000000000000000000000000000000000000000000
00000000000000000000051b00120000ffeefe660095009c03ec00120585
0000405a8574737271706f6e6d6c6b6a696867666564625f5e5d5c5b5a59
585554535251504f4eb34d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c0020
b200400325b0062649618b3812342d2c2320b000508a8a64b10003255458
b0401bb10103255458b005438b59b04f2b5923b0622b2321235865592d2c
b108000c215460432d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b12601885158b94000020063b80400885458b202400243604259b940
00040063b80800885458b202800243604259b12801885158b94000080063
b81000885458ba00020100000243604259595959595959b1000243545840
0a0540084009400c020d021bb10102435458b2054008ba010000090100b3
0c010d011bb18002435258b2054008b80180b109401bb901000002435258
b2054008ba0180000901401bb901800002435258b2054008b80200b10940
1bb2054008ba010000090100595959b9400000808855b94000020063b804
0088555a58b30c000d011bb30c000d0159595942424242422d2c45186823
4b51582320452064b04050587c59688a6059442d2cb00016b00225b00225
01b001233e00b002233eb10102060cb00a236542b00b234201b001233f00
b002233fb10102060cb006236542b0072342b00116012d2c20b82000628a
6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff545821
cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b00425
4760b0062547b0806361b00225b0005558b00325b00725496359b0082558
001b0159b00425b0062549b009255cb009255a58b0092b59b0072546b080
6361b0032520b0005558631b2159612320b0005558b080631b21b08059b0
592bb006255c586959b00425202010b00048233ab0062658001b0159b005
2658b003252f598a12233221212d2cb00625b00a2587b00625b009254ab0
005358b00625b00a251bb00925b0072559b00225b00225070cb005256323
b00625636020b94000040063535821b00426b00426b00a1bb94000040063
655158b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d
0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558
b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff5458
21cd1bed59b00525b0052507b00825b00b254923b00625b0062587b00a25
10b00b25c15920b00051b800522378b00161b00225b00725b0072507b00a
25b00d254961b08062b00525b005250bb00a252338b00625b0062587b008
25b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b00325
54b8ffa723792121212121212121212121212d2c23b0005458b940000000
1bb900004000598ab0005458b9400000001bb90000400059b05b2b2d2c08
b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab00054
58b9400000001bb90000400059b05b2b2d2cb00426b00426080db00426b0
0426080db05b2b2d2cb0022563b0206066b00225b82000626023622d2c20
4569442d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b00225
64b002256164b00343525821206459b1024e2b23b000505865592d2c238a
4a234564b0022564b002256164b00343525821206459b1014e2b23b00050
5865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a10
3b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a10
3b2d2cb0032546b003254660b004252eb00425b00425b0042620b0005058
21b06a1bb06c592bb0032546b00325466061b08062208a2010233a232010
233a2d2cb0032547b003254760b0052547b0806361b00225b00625496323
b005254ab080632058621b2159b0042646608a468a4660b02063612d2cb0
0426b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0
01545821b00225b1024e2bb0805020605920606020b001515821211b20b0
05515821206661b0402361b100032550b00325b00325505a5820b0032561
8a535821b000591b21591bb00754582066616523211b2121b000595959b1
024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546
20666120b00526b0062649b00526b00526b0702b236165b02060206661b0
2061652d2cb0022546208a20b000505821b1024e2b1b452321596165b002
25103b2d2cb0042620b802006220b80200638a236120b05d602bb0052511
8a128a20398a58ba005d10000004266356602b23212010204620b1024e2b
23611b2321208a201049b1024e2b593b2d2cba005d10000009256356602b
b00525b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525
b06f2bba005d10000008266356602b20b0005258b0502bb00525b00525b0
0725b00725b00525b0712bb0021738b00052b00225b001525a58b00425b0
062549b00325b00525496020b0405258211bb000525820b0025458b00425
b00425b00725b0072549b00217381bb00425b00425b00425b0062549b002
1738595959595921212121212d2cb12501885058b94000020063b8040088
545cb0194b525b1bb001592d000000010000000700009bfaa17f5f0f3cf5
0009080000000000bbe31b2a00000000d690bb92fc8bfd95056b08170000
000800020000000000000001000005f1fdf1015e0466fc8bfe51056b0001
00000000000000000000000000000a4e0466005804660000000000000466
00000466000a0466009e0466005c0466006d046600c9046600cd04660042
0466006f046600ac046600b60466009c046600e904660031046600770466
00390466009e04660039046600aa0466006f046600560466006d04660004
0466002d04660012046600000466006f0466000004660000046600000466
000004660000046600000466000004660000046600000466000a0466ffd5
0466ffd50466003d0466003d0466003d0466003d0466005c0466ffd90466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046600c90466003d0466003d0466003d046600420466
00000466001f046600000466000004660000046600000466000004660000
0466000004660000046600ac0466006f046600000466009c046600000466
ff0c046600e90466002d046600c204660000046600000466000004660077
046600770466000004660000046600000466000004660000046600000466
000004660000046600390466ff9c0466001f0466009e0466ffd90466ffd9
046600aa0466000004660000046600000466006f0466006f046600000466
005604660056046600000466000004660000046600000466000004660000
0466000004660000046600000466006d0466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
04660085046600a00466009e0466006d04660075046600000466005e0466
00a0046600ac04660083046600b6046600ac0466005a046600a00466005c
046600a00466006d046600c9046600b60466003f046600a0046600420466
0025046600460466003b046600a404660000046600000466000004660000
0466000004660000046600000466000004660000046600850466001f0466
000004660029046600290466003d046600290466009e0466fff204660064
046600620466000004660000046600000466000004660000046600000466
000004660000046600750466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
00000466000004660000046600ac046600ac0466006a0466008304660000
046600b6046600b6046600290466ff73046600ac046600ac046600700466
00000466000004660000046600a004660000046600a00466000004660000
0466000004660000046600000466000004660000046600000466005c0466
ffb004660027046600a00466000004660000046600c90466000004660000
04660000046600b6046600b604660093046601210466ff4a0466003f0466
003f04660000046600000466000004660000046600000466000004660000
0466000004660000046600a0046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660050
046600500466008904660000046600000466000004660000046600000466
000004660000046600890466008904660089046600000466000004660000
046600000466000004660000046600000466008904660089046600480466
00480466000004660135046600520466ff070466013504660050046600e6
04660089046600520466ff9d0466008904660089046600080466005e0466
0000046600000466005e046600c90466000004660000046600c904660062
046600000466000004660062046600390466003904660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
0000046600000466000004660000046600000466000004660000046601b4
046602ac046601b00466000004660000046600ee046600fa0466019a0466
01850466003b0466010804660108046601ac046601b2046601b20466012f
046600cb046600cb046600c404660196046600ee04660068046600390466
00ee04660039046601200466015904660120046601590466008f0466009c
0466008f0466009c04660073046601e104660085046600850466fffc0466
fffc0466fffc046601020466018d0466018d0466012c046601040466012c
0466010404660159046601200466015904660120046600a2046600e50466
00a2046600e5046600a4046600b4046600b40466008d0466006d0466000a
0466009e046600e904660037046600c90466006f0466006f046600320466
00ac0466009c046600040466003104660077046600ae0466003904660075
0466009e0466006f046600560466000004660000046600120466003f0466
002b0466000a0466ff960466ff6d0466ff81046600000466ffaa0466ff3e
046600000466ffbf04660050046600a0046600620466003f0466006d0466
00810466009e04660089046600620466007304660089046600b604660042
046600a004660046046600910466005c0466002b046600a00466005c0466
009e0466003f0466008a0466002904660029046600370466005604660027
046600000466002904660029046600000466000004660000046600000466
0000046600000466000004660000046600000466ff6d046600000466018d
0466018d046600fa046600e3046600dd0466000a0466009e0466009e0466
00e90466000c046600c90466fff60466006d04660077046600000466009c
0466001b046600310466006f04660039046600750466009e0466005c0466
00560466003904660000046600120466007f04660065046600540466004a
04660023046600520466009e04660083046600540466005e046600000466
00e9046600040466005a0466006f0466000004660000046600ac04660000
046600b604660000046600000466fff20466005204660004046600000466
007b046600040466003904660004046600850466007d046600a0046600f2
04660017046600750466fffe04660085046600ae04660000046600b60466
002104660031046600a00466005c046600a0046600a00466009e0466005e
0466003b046600290466004604660098046600870466005a0466004c0466
002304660052046600a60466009c046600540466005604660000046600f2
046600000466009e046600b60466000004660000046600ac046600000466
00830466000004660000046600000466005a0466000004660000046600a0
046600230466005c046600420466006d0466000004660000046600790466
0040046601e1046600a004660000046601c1046601020466000904660004
0466000c0466000c0466006a0466000a0466001904660056046600330466
006f0466007d0466007d0466005c0466002b04660037046600e1046600dd
046600250466002b04660058046600580466005804660087046600930466
00a40466002b046600b20466007b04660075046600770466006404660058
04660058046600580466008704660093046600a40466002b046600b20466
007b046600750466007704660064046600cd046600e3046600f604660112
046600d304660125046600ee04660100046600fc046600e9046600a60466
00a6046600a604660158046600ee046600cd046600e3046600f604660112
046600d304660125046600ee04660100046600fc046600e9046600a60466
00a6046600a604660158046600ee046600cd046600e3046600f604660112
046600d304660125046600ee04660100046600fc046600e9046600140466
001404660014046600140466001404660000046600540466008504660068
046600930466005404660085046600850466007f04660089046600d10466
00850466008504660075046600d50466003d0466000c046600710466007b
0466003d046600370466002b046600a00466002904660075046600520466
0028046601b0046601b004660118046601180466fff80466fff804660118
04660118046600c9046600c90466013b046601290466011a0466011a0466
013b04660129046600c9046600c9046601ae0466000a0466000a0466000a
0466fff80466000a0466000a046600000466000a0466000a0466000a0466
000a04660000046600c9046600c904660000046600c90466fff8046600c9
046600c904660000046600ac046600ac0466003904660039046600390466
fff804660039046600390466000004660039046600000466000004660039
04660000046600390466006d0466006d0466006c0466ffbf0466ffcf0466
006c0466ffbb0466006c0466000004660000046600850466008504660085
0466fff80466008504660085046600000466008504660085046600850466
008504660000046600750466007504660000046600750466fff804660075
0466007504660000046600ac046600ac0466005c0466005c0466005c0466
fff80466005c0466005c04660000046600480466ffed0466000004660048
0466000004660048046600a0046600a00466006d0466ffa60466ffc90466
006d0466ffb10466006d0466003b046600000466003b0466000004660062
046600380466000004660014046600140466001404660014046601110466
00c40466005c0466006a046600440466009b0466007204660085046601db
0466007b0466002e0466004e0466000e046600640466001f046600210466
002404660029046600a8046600140466003e0466002b0466006904660108
046600000466001204660000046600000466000004660000046601110466
00cb046600cb046600fb046600fb0466003204660032046600a8046600a8
046600a8046600a804660014046600140466000a04660032046600320466
000004660000046600000466023304660000046600000466000004660000
046601e80466000004660000046601e80466000004660000046601e80466
000004660000046601e8046600000466000004660000046601e804660000
04660000046601e80466000004660000046601e804660152046600000466
000004660152046600000466000004660152046600000466000004660152
046600000466000004660000046601520466000004660000046601520466
000004660000046601520466003204660077046600770466007704660056
0466003f046600ac046600f70466015504660123046601370466016c0466
016c0466010b04660130046601550466014f0466015f0466018e0466010d
046601320466011004660155046601100466015f0466012d046601280466
012f046600fa0466010b046600fb046600f8046601320466000204660002
046600000466000004660000046600000466000004660000046600cf0466
00cf04660000046600000466000004660000046601b3046601b3046601b3
046601b30466008e0466ff72046601600466016004660176046601760466
01d0046601600466016004660160046601600466017304660173046600ec
0466016e046601f1046600f1046600f10466000004660000046600000466
0000046600000466012d04660000046600000466000004660000046600f2
046600f204660085046600850466002a0466002a0466ffa60466ffa60466
01d0046600f10466016d046600f30466017104660171046601b1046601b1
04660000046600000466008e046600000466ff7204660000046600f10466
00f1046600000466000004660176046600ca046600ca046600c9046600c9
0466000004660000046600460466017a04660000046601a7046601a70466
000004660000046600cf046600cf04660171046601a7046601a7046600e2
046600000466000004660000046600000466016c046600de046601760466
017604660003046600030466000304660027046600270466002704660040
046600400466000304660003046600060466014b0466014b0466013c0466
013c04660157046601570466012e0466012e046601510466015104660157
04660157046601450466014504660151046601510466011d0466011d0466
014b0466014b0466013b0466013b04660121046601210466011e0466011e
04660008046600080466000204660002046601dd046600000466008d0466
008d0466008d0466008d046600b4046600b4046600b4046600b404660023
0466002304660024046600240466014b0466000004660000046600e20466
00000466009e04660020046600830466005c04660000046600000466005a
046600b60466003b0466006d0466ffcb0466004204660004046601bb0466
00ac0466009c0466005a0466ffc804660039046600660466ffeb046600aa
046600830466006f04660006046600560466002b0466006d046600140466
006f046600a7046600a4046600300466004f0466004f0466007d0466007d
0466003c0466003c04660000046600000466000004660000046600000466
0000046600000466000004660000046600000466ffd5046600420466001e
0466fff204660039046600020466fff70466004f0466004f046600000466
005a04660067046600320466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
00a70466000004660077046600680466006f04660000046600c904660000
046600000466000004660000046600000466ffa60466ffbd046600300466
ffd0046601220466fffe04660000046600040466ffa6046600b604660039
046600000466ffff0466000a046600000466009e04660000046600000466
00000466006d046600000466006d04660000046600000466000004660000
04660000046600000466000004660032046600000466006f046600000466
0034046600000466000004660000046600000466009c04660000046600e9
046600280466003204660032046600000466000004660031046600000466
007704660000046600000466000004660000046600000466000004660000
0466000004660000046600aa0466000004660000046600000466006f0466
00000466000004660000046600000466005604660000046600000466006d
04660000046600000466ffff046600000466000004660004046600000466
002d046600000466000004660000046600000466006f0466000004660013
0466ff190466ffbd046600aa0466006f0466009c0466006f046600830466
00b8046600b404660000046600a0046600200466009e0466006d0466006d
0466002b0466005a046600a0046600b6046600ac0466004a046600890466
00420466008904660064046600a0046600cb0466003f0466003f0466003b
046600a4046600a40466009e046600960466002c0466002a0466003c0466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660076046600000466000004660000046600000466
0000046600320466005c0466000c046600000466ffcf0466ffcf0466002c
0466ffaf0466003404660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600bb046600000466006d046600680466009f04660000
046600750466000004660000046600000466000004660000046600cd0466
00a00466003f0466003c0466003c0466004e046600b6046600a40466012f
0466002a046600830466004804660083046600480466006d046600270466
004904660027046600440466001e046600490466009304660093046601e1
0466013e046600d1046601ac0466008504660046046600a0046600000466
00000466ffbb0466006d046600000466006d046600000466000004660000
046600280466002504660000046600000466005004660050046600000466
004d046600a0046600000466006104660000046600000466000004660000
0466000004660000046600000466000004660000046600b6046600000466
00ac04660135046600890466ffe40466001f0466ffee0466001904660019
0466001904660016046600160466001604660000046600000466005a0466
0000046600a0046600000466000004660000046600000466000004660000
0466000004660000046600000466000004660000046600000466009d0466
005e0466009d04660062046600000466000004660000046600000466feef
0466ff780466feef0466000004660000046600b604660000046600000466
00000466ff820466003f0466000004660000046600a00466000004660000
046600000466000004660000046600420466000004660025046600000466
00000466000004660000046600a404660000046600000466000004660000
046600000466002404660050046600ac04660053046600890466002a0466
002a046600a0046600b6046600a404660065046600ba046600be046600d2
04660043046600850466006d046600a0046600a0046600ba0466009e0466
006d0466006d046600760466007604660041046600810466008504660085
04660065046600830466006d0466006d0466009e04660042046600790466
00a0046600a0046600a0046600ac0466008904660089046600ac04660089
0466008904660089046600b60466001704660027046600cd0466ffff0466
005a0466005a0466005a0466ffba046600a0046600a00466005c0466005c
04660043046600290466005e0466005e0466005e046600c9046600c90466
00c904660061046600aa046600aa046600b60466007b0466007b0466007b
046600370466009d0466003f046600000466004904660084046600420466
00250466003b04660045046600a4046600a4046600bb0466007404660122
04660122046601220466009e04660039046600ab046600650466009e0466
00a0046600330466003f046600a00466006d0466008f046601220466002c
0466002c0466002c0466001f0466001f0466001f0466000d046600190466
0037046600a6046600a60466ffc10466ffc1046600360466fff60466001f
046600470466007d046600aa04660048046600d2046600a3046600ac0466
00f7046600c00466003904660031046600ae046600480466007d0466003f
0466003f0466ffdd046600270466008b0466003f0466003f046600a20466
006b0466006b046600770466009104660034046600340466004d04660042
04660025046600a404660085046600b60466005a046600e6046600310466
0098046600d2046600670466000d046600ce046600890466011a046600b0
0466011a0466013804660136046600dc046600ff0466012c046601230466
01160466015b046600cf0466010604660108046600d60466010604660128
04660128046600f404660102046600cd04660114046601140466010e0466
00cc046601290466010e0466010e046601070466012a0466012a0466011b
0466013904660140046600e90466011e0466010304660127046600f40466
00f404660129046600c50466011e046600fa046600e9046600eb046600f8
0466011b046600fc04660107046600da046600df0466012c0466014a0466
011e046600eb0466011b046600fc04660129046600da046600df04660046
0466fecb0466006d0466ffc204660008046600080466feca0466ff110466
fef3046600240466ffa70466001f0466005e046601040466005e0466000a
046600ac046600890466ffb60466000f0466000f046600a00466006d0466
000004660018046600b6046600ac0466005a046600a0046600a004660081
046600b60466007b0466004204660046046600a4046600850466006d0466
006d04660075046600850466008504660076046600ac046600ba0466007b
046600a004660085046601200466012704660119046601150466012a0466
0107046601070466011b0466013404660131046601210466013904660139
0466010004660137046601180466015f046600e9046600e9046600a70466
01340466011004660105046600e30466013304660118046600cc046600d0
046600fb0466011004660110046600da0466012d0466012d0466012d0466
014f0466010704660117046601170466012e046601100466010c046600bc
0466010b046600a6046600d5046601530466009104660196046600ee0466
0172046601d0046601d00466012f0466015904660089046600d104660002
04660002046601f10466000004660000046601f104660000046600000466
0000046601ae046601ae046601d0046601d0046601600466016004660160
046601600466015804660171046600da0466013d0466012d046600e90466
015404660141046601410466014104660141046601410466009604660096
046600960466009604660043046600430466004304660043046600430466
0043046600430466002f0466002f0466002f0466002f0466002f0466002f
04660025046600250466002504660025046600250466001a0466001a0466
001a0466001a0466001a0466001a04660042046600420466004204660042
046600420466004204660096046600960466009604660096046600420466
004204660042046600420466004204660042046600420466002f0466002f
0466002f0466002f0466002f0466002f0466002f0466002f0466002f0466
002f0466002f046600260466002604660026046600260466002604660026
046600420466004204660042046600420466004204660042046600960466
009604660096046600960466004204660042046600420466004204660042
046600420466002604660026046600260466002604660026046600260466
002304660023046600230466002304660023046600230466002f0466002f
0466002f0466002f0466002f0466002f0466004b0466004b0466004b0466
004b0466004b0466004b0466009604660096046600960466009604660042
04660042046600420466004204660042046600420466001a0466001a0466
001a0466001a0466001a0466001a04660024046600240466002404660024
04660024046600240466002f0466002f0466002f0466002f0466002f0466
002f0466004e0466004e0466004e0466004e0466004e0466004e04660096
046600960466009604660096046601400466014004660000046600000466
00390466016404660164046601a7046601a70466016e0466000004660018
04660000046600000466019a046601760466017604660176046601760466
001e0466001e04660148046600000466000004660000046600000466003c
0466003c046601140466010e04660103046600ec0466010e046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046601b30466
01b304660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660173046601730466
00390466005c046600830466005c04660083046600530466fd1304660000
046600cd04660039046600460466005a046600460466005c0466009e0466
006c0466009e0466009c0466000c046600320466ffa6046600a004660001
0466009e046600ba0466006f0466ff9604660043046600d70466005c0466
0075046600870466003b0466009e046600830466ffba046600320466fe6c
0466fe120466fdcc0466fe640466fe600466fdf70466fdcb0466fe5f0466
fe720466fe6804660000046600000466000a0466fe6c0466fe120466fdcc
0466fe6e0466fe600466fdf70466fdcb0466fe5f0466fdbe0466fd3f0466
fd370466fdba0466fd370466fd360466fdb30466fdd60466fd780466fcdd
0466fcdd0466fd770466fd790466fcdd0466fcdd0466fd770466fd4f0466
fd720466006f0466fd780466fcdd0466fcdd0466fd770466fd790466fcdd
0466fcdd0466fd770466fda90466fd2c0466fd360466fda90466fda90466
fd2c0466fd360466fda80466fd910466fde604660000046600000466fda9
0466fd4f0466fceb0466fd9f0466fd4f0466fceb0466fdd50466fd8b0466
fd930466fd360466fc8b0466fcd20466fd2c0466fd070466fd6104660000
046600000466fd9f0466fd540466fceb0466fd9e0466fd9f0466fd540466
fceb0466fd9e0466fdc70466fd760466002b0466fd9f0466fd540466fceb
0466fd9e0466fd9f0466fd540466fceb0466fd9e0466ffcf046600000466
ffd9046600000466ffcf046600000466ffd9046600000466000004660000
046600000466000004660000046600500466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660027046600000466000004660014046600000466001f0466
001904660000046600000466000004660000046600000466000004660000
04660000046600000466ffda046600000466008904660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
00000466000004660000046600000466ffff046600580466ffd304660000
046600000466000004660000046600000466000004660000046600000466
0000046600000466ffe30466000004660000046600000466000004660000
046600000466ffed04660000046600000466000004660000046600000466
0000046600320466ffcf0466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600270466
ffd904660000046600270466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
0000046601b4046601210466008b046600100466009e046600100466009e
0466fff60466006d0466009c0466009c04660024046600230466006f0466
006f04660064046600390466005c04660056046600000466000004660012
0466001e04660065046600650466006e0466ffe70466ffe7046600ac0466
fff60466009c0466001b0466006f0466006f046600650466003b04660000
046600000466ffd5046600000466003b046600000466fff6046600000466
00a704660000046600000466000004660039046600000466000004660000
046600000466000004660000046600e90466000004660010046600120466
00120466005a046600530466002b0466008f0466ffe80466006f04660042
046600560466006d0466001b046600ae04660023046600a0046600420466
00a60466fffe04660085046600b6046600b60466001604660023046600a0
046600a0046600640466005c0466009e0466005e04660042046600420466
00460466002b04660087046600870466009f0466fff10466fff10466fffe
046600b604660021046600a0046600a00466008704660031046600ac0466
0000046600580466001f0466000004660076046600000466fffe04660000
046600bb0466000004660000046600000466005c04660000046600040466
0000046600000466003b04660029046600f2046600000466004204660046
046600460466006d0466005f0466003e046600930466fff8046600a00466
009e04660054046600850466002104660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
00000000ffdc0000ff2504660085046600850466013e0466000004660196
0466003904660153046600530466001204660002046600a3046600310466
00520466005c0466002b0466000004660046046600000466005804660000
04660056046600000466002d046600000466004204660032046600320466
005c04660005046600000466001404660014046600140466001404660014
0466001404660014046600140466005a0466006c04660086046600840466
001e04660043046600590466005a0466006c0466004e046600be0466001e
0466007d0466006e046600000466000004660000046601c4046601c40466
01c4046601c4046600000466000004660036046600090466000004660000
04660046046600540466000a046600500466fff60466004b0466003c0466
003f046600000466004a0466003904660046046600000466005c04660052
0466005604660028046600320466fffe0466004b04660078046600560466
00000466005d0466005c04660052046600000466009e046600630466008e
0466ff720466000004660000046600000466000004660000046600000466
00000466ff99046600000466019c046601bc0466018f046600000466009e
0000ffdc0000fe510466000004660185046600000466012c046600140466
005b046601110466007a04660138046600000466fffe046600000466fffe
0000000004660155013e010f015501550155019c019c0000000000000000
0000000000000000000000000000000001ea017a00000000000000f2ffa6
002a00f20000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000890089
00ac00890089008900890000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000008b00560080002e004200360000019d
0000000001e8019d0000000001e8019d01e8019d019d00000000000001e8
019d019d00000000000001e8019d019d019d019d019d019d000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001e8019d01e80000000001e80000000000000000
01e8023301e80000019d0233019d0000019d0000019d003d01850077008b
00550064008b0089008b008b004f0055008b00e900590039008b009d0083
0064004600650046ffff0085008b00890050007a0064008b0064006d008b
003f00b30029000000390046019600ee00fe016800ae01370057005a00a0
004b005a00a0004b00a000a0004d004b00a0013b004d007400a000a000a0
005a0046005a0083000000b600a000b6005a00a000a000a0005a005a00a0
007700df005a0014005c0041005a019a0108002900290064005800580058
005800580039006d002d0025009e00b40057005600880077006800b6009c
008300a30050006d006f0019007d0083000f000000390031000a006f0031
000a000a0000005e005c00bf012e00ce006f006f00000000006200370000
0000009c00b600000000006f0081007500a0006e009fffc8ffba00000000
00160017001b002100a300cd00e500e501c401c401c400f8019a00fd01c1
01c1002f00000000002f0022014b0144014d0145013c013d014901510157
016d0151015a011d0151012e01450133014b0167013b015101210119011e
01260160002f002600220000000000990099009900990104017b01e101e1
02250261026102a302df032a032a035203cc041a047604c5055205c70648
0648068d068d068d068d06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc06dc
06dc06dc06dc076207c9082b088e090409620a550aa40b0b0b0b0b550b8f
0c0b0c590cb30d1e0d820dcf0e590eb10efc0f3d0fc5106010d010d010d0
10d010d010d010d010d010d010d010d010d010d010d010d010d010d010d0
10d010d010d010d010d010d010d010d010d010d010d010d010d0113e11a3
11a311a311a311a311a311a311a311a311a311a311a311a311a311a311dd
11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd
11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd
11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd
11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd11dd
11dd11dd124512cf134e134e134e134e134e134e134e134e134e139b1427
14271427142714271427142714271427148914891489148914cf14cf14cf
14cf14cf14cf153115311531153115311531159815981598159815eb15eb
15eb15eb167b167b167b167b167b167b167b167b167b167b167b167b167b
167b167b167b167b167b167b167b167b167b167b167b167b167b167b167b
167b167b167b167b167b167b167b167b167b16d8170f170f173017391782
178217821782178217821782178217821782178217821782178217821782
178217821782178217821782178217821782178217821782178217821782
17b417e617ee17f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f617f617f617f617f617f6
17f617f617f617f617f617f617f617f617f617f618521852185218711895
18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca18ca
18ca18ca18ca18ca18ca195619de1a381a841ae81b7f1bd51c411cc81cfb
1dbc1e401ecb1f581fb21ffe206220ef214421a7222c2260232d23b523be
23c723d023d923e223eb23f423fd2406240f240f240f24182421242a2483
24c6252625aa25fc265a26c626f8278c2806280628062834287628b828c1
28ca28d328dc28e528ee28f7290029092912291229122912291229c629c6
29c629c629c629c629c629f429f429f429f42a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b
2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a1b2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e2a6e
2a6e2a6e2a6e2a6e2a6e2acf2b442ba02ba02be92c292c292c6f2cb22cfd
2cfd2d272d8c2dd32e322e832f112f7c30053005304d304d304d304d3090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
309030903090309030903090309030903090309030903090309030903090
30903090309030903090309030903110311031103110317631ea32613261
3261326133523352339b34263426347b347b347b347b34ec354135923592
359235c535c535c535c535c535c535c535c535c535c535c535c535c535c5
35c535c535c535c535c535c535c535c535c535c535c535c535c535c535c5
35c535c535c535c535c535c535c535c535c535c535c535c535c535c535c5
35c535c535c535c535c535c535c535c535c535c535c535c535c535c535c5
35c535c535c535c535c535c53616361636163616366b366b366b366b366b
366b366b366b366b366b366b366b366b366b366b366b366b366b366b366b
366b366b366b366b366b366b366b366b366b366b366b366b36c036c036c0
370f370f370f370f376337bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb37bb
37bb37bb37bb37bb37bb37bb37bb380e3857389338d93921395139d73a0b
3a3d3a3d3a633a833ad83b0d3b4d3b973bdd3c113c6a3c9f3ccf3cee3d23
3d4a3d843d843d843d843d843d840000000100000bd60061000500410003
00020010002f00b400000c81189f000100010000002a01fe000000030000
0000006400000000000300000001001000640000000300000002000e00dc
0000000300000003002600ea000000030000000400100064000000030000
000500180110000000030000000600100064000000030000000700780064
0000000300000008002a000e000000030000000900200128000000030000
000b00560148000000030000000c002a019e000000030000000d038801c8
000000030000000e006c05500001000000000000003205bc000100000000
0001000805ee00010000000000020007062a000100000000000300130631
0001000000000004000805ee0001000000000005000c0644000100000000
0006000805ee0001000000000007003c05ee0001000000000008001505c3
000100000000000900100650000100000000000b002b0660000100000000
000c0015068b000100000000000d01c406a0000100000000000e00360864
000300010409000000640000000300010409000100100064000300010409
0002000e00dc0003000104090003002600ea000300010409000400100064
000300010409000500180110000300010409000600100064000300010409
0007007800640003000104090008002a000e000300010409000900200128
000300010409000b00560148000300010409000c002a019e000300010409
000d038801c8000300010409000e006c055000a900200032003000310038
0020004d006900630072006f0073006f0066007400200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000720069
0067006800740073002000720065007300650072007600650064002e0043
006f006e0073006f006c0061007300200069007300200061002000740072
006100640065006d00610072006b0020006f006600200074006800650020
004d006900630072006f0073006f00660074002000670072006f00750070
0020006f006600200063006f006d00700061006e006900650073002e0052
006500670075006c00610072004d006900630072006f0073006f00660074
003a00200043006f006e0073006f006c0061007300560065007200730069
006f006e00200037002e00300030004c0075006300280061007300290020
00640065002000470072006f006f00740068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0063
00740066006f006e007400730068007400740070003a002f002f0066006f
006e007400660061006200720069006b002e0063006f006d004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e0061007300700078a92032303138204d6963726f736f
667420436f72706f726174696f6e2e20416c6c2072696768747320726573
65727665642e436f6e736f6c617320697320612074726164656d61726b20
6f6620746865204d6963726f736f66742067726f7570206f6620636f6d70
616e6965732e526567756c61724d6963726f736f66743a20436f6e736f6c
617356657273696f6e20372e30304c7563286173292064652047726f6f74
687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f67
72617068792f6374666f6e7473687474703a2f2f666f6e7466616272696b
2e636f6d4d6963726f736f667420737570706c69656420666f6e742e2059
6f75206d617920757365207468697320666f6e7420746f20637265617465
2c20646973706c61792c20616e64207072696e7420636f6e74656e742061
73207065726d697474656420627920746865206c6963656e736520746572
6d73206f72207465726d73206f66207573652c206f6620746865204d6963
726f736f66742070726f647563742c20736572766963652c206f7220636f
6e74656e7420696e207768696368207468697320666f6e74207761732069
6e636c756465642e20596f75206d6179206f6e6c792028692920656d6265
64207468697320666f6e7420696e20636f6e74656e74206173207065726d
69747465642062792074686520656d62656464696e672072657374726963
74696f6e7320696e636c7564656420696e207468697320666f6e743b2061
6e6420286969292074656d706f726172696c7920646f776e6c6f61642074
68697320666f6e7420746f2061207072696e746572206f72206f74686572
206f75747075742064657669636520746f2068656c70207072696e742063
6f6e74656e742e20416e79206f74686572207573652069732070726f6869
62697465642e687474703a2f2f7777772e6d6963726f736f66742e636f6d
2f7479706f6772617068792f666f6e74732f64656661756c742e61737078
412002a1002d02a00055003f02a2000100c002a20001009f02a20001009f
02a20001007002a00001002f02a00001029c002d029b0055029a002d0299
005500200203b40918014a20b80202b40918014a20b80201b40918014a20
b80200b40918014a20b801ffb40918014a20b801feb40918014a20b801fd
b40918014a20b801fbb40918014a20b801fab40918014a20b801f9b40918
014a20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20
b801f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2
b40918014a20b801f1b40918014a20b801f0b40918014a20b801efb40918
014a20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20
b801ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8
b40918014a20b801e7b40918014a20b801e6b40918014a20b801e5b40918
014a20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20
b801e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801de
b40918014a20b801ddb40918014a20b801dcb40918014a20b801dbb40918
014a20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20
b801d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4
b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1b40918
014a20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20
b801cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801ca
b40918014a20b801c9b40918014a20b801c8b40918014a20b801c7b40918
014a20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20
b801c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0
b40918014a20b801bfb40918014a20b801beb40918014a20b801bdb40918
014a20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20
b801b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6
b40918014a20b801b5b40918014a20b801b4b40918014a20b801b3b40918
014a20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20
b801afb40918014a20b801adb40918014a20b801acb40918014a20b801ab
b40918014a20b801aab40918014a20b801a9b40918014a20b801a8b40918
014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a20
b801a4b40918014a20b801a2b40918014a20b801a1b40918014a20b801a0
b40918014a20b8019fb40918014a20b8019db40918014a20b8019cb40918
014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a20
b80198b40918014a20b80197b40918014a20b80196b40918014a20b80195
b40918014a20b80194b40918014a20b80193b40918014a20b80192b40918
014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a20
b8018eb40918014a20b8018db40918014a20b8018ab40918014a20b80189
b40918014a20b80188b40918014a20b80187b40918014a20b80186b40918
014a20b80185b40918014a20b80184b40918014a20b80183b40918014a20
b80181b40918014a20b8017fb40918014a20b8017eb40918014a20b8017d
b40918014a20b8017cb40918014a20b8017bb40918014a20b80179b40918
014a20b80178b40918014a20b80177b40918014a20b80176b40918014a20
b80174b40918014a20b80173b40918014a20b80172b40918014a20b8016f
b40918014a20b8016eb40918014a20b8016db40918014a20b8016cb40918
014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a20
b80168b40918014a20b80167b40918014a20b80166b40918014a20b80165
b40918014a20b80164b40918014a20b80163b40918014a20b80162b40918
014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a20
b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b8015b
b40918014a20b80159b40918014a20b80158b40918014a20b80157b40918
014a20b80156b40918014a20b80155b40918014a20b80154b40918014a20
b80152b40918014a20b80151b40918014a20b80150b40918014a20b8014f
b40918014a20b8014eb40918014a20b8014db40918014a20b8014ab40918
014a20b80149b40918014a20b80146b40918014a20b80142b40918014a20
b80141b40918014a20b80140b40918014a20b8013fb40918014a20b8013d
b40918014a20b8013bb40918014a20b80139b40918014a20b80138b40918
014a20b80137b40918014a20b80136b40918014a20b80135b40918014a20
b80134b40918014a20b80133b40918014a20b80132b40918014a20b80131
b40918014a20b80130b40918014a20b8012fb40918014a20b8012eb30918
014a41370286006402850055000002850001028300640284005500d00284
0001002f0284006f028400af0284000300000282000100f002820001002f
028200af0282000200af0281000100700281000102800064027f00550050
027f0080027f00020010027f0040027f0070027f0003027db2644155b802
7eb241ff1fb9027b027cb2641f0f412c027c003f027c006f027c000300af
027c00df027c00020010027c0001005f027a00df027a0002005f027900df
0279000200ef02780001009002780001006f027800010010027800010276
00640277005500100277002002774075027201411f6f03411f6e02411f69
2d6855672d6655652d6455632d6255613260552f603f60025f325e551f5a
bf5a02705ae05a02562d55553f5501542d53553f5301c053019f53019f53
01522d5155502d4f55704f012f4f019f4801704801c048016f4801404801
462d4555442d4355422d415540b8026eb2090f46b9026c026bb2321f40b8
026bb2090f46b9ffc00266b3090c46d0bb0273000100400271b331374640
b80271b21c2146b80203b21e221fb80202b21e221fb80201b21d281fb802
00b21d281fb801ffb21d281fb801feb21d281fb801fdb21d281fb801fcb2
1d281fb801fbb21c2b1fb801fab21c2b1fb801f9b21c2b1fb801f8b21c2b
1fb801f7b21c2b1fb801f6b21c2b1fb801f5b21c2b1fb801f4b21b2f1fb8
01f3b21b2f1fb801f2b21b2f1fb801f1b21b2f1fb801f0b21b2f1fb801ef
b21b2f1fb801eeb21b2f1fb801edb21b2f1fb801ecb21b2f1fb801ebb21b
2f1fb801eab21b2f1fb801e9b21b2f1fb801e8b21b2f1fb801e7b21b2f1f
b801e6b21b2f1fb801e5b21b2f1fb801e4b21b2f1fb801e3b21b2f1fb801
e2b21a381fb801e1b21a381fb801e0b21a381fb801dfb21a381fb801deb2
1a381fb801ddb21a381fb801dcb21a381fb801dbb21a381fb801dab21a38
1fb801d9b21a381fb801d8b21a381fb801d7b21a381fb801d6b21a381fb8
01d5b21a381fb801d4b21a381fb801d3b2193b1fb801d2b2193b1fb801d1
b2193b1fb801d0b2193b1fb801cfb2193b1fb801ceb2193b1fb801cdb219
3b1fb801ccb2193b1fb801cbb2193b1fb801cab2193b1fb801c9b2193b1f
b801c8b2193b1fb801c7b2193b1fb801c6b2193b1fb801c5b2193b1fb801
c4b2193b1fb801c3b2193b1fb801c2b2193b1fb801c1b2193b1fb801c0b2
193b1fb801bfb2193b1fb801beb2193b1fb801bdb2193b1fb801bcb2193b
1fb801bbb2193b1fb801bab2193b1fb801b9b2193b1fb801b8b218411fb8
01b7b218411fb801b6b218411fb801b5b218411fb801b4b218411fb801b3
b218411fb801b2b218411fb801b1b218411fb801b0b218411fb801afb218
411fb801aeb218411fb801adb218411fb801acb218411fb801abb218411f
b801aab218411fb801a9b218411fb801a8b218411fb801a7b218411fb801
a6b218411fb801a5b218411fb801a4b218411fb801a3b218411fb801a2b2
18411fb801a1b218411fb801a0b218411fb8019fb218411fb8019eb21841
1fb8019db218411fb8019cb218411fb8019bb218411fb8019ab218411fb8
0199b218411fb80198b218411fb80197b218411fb80196b218411fb80195
b218411fb80194b218411fb80193b218411fb80192b218411fb80191b218
411fb80190b218411fb8018fb218411fb8018eb218411fb8018db218411f
b8018cb218411fb8018bb218411fb8018ab217471fb80189b217471fb801
88b217471fb80187b217471fb80186b217471fb80185b217471fb80184b2
17471fb80183b217471fb80182b217471fb80181b217471fb80180b21747
1fb8017fb217471fb8017eb217471fb8017db217471fb8017cb217471fb8
017bb217471fb8017ab217471fb80179b217471fb80178b217471fb80177
b217471fb80176b217471fb80175b217471fb80174b217471fb80173b217
471fb80172b217471fb80171b217471fb80170b217471fb8016fb217471f
b8016eb217471fb8016db217471fb8016cb217471fb8016bb217471fb801
6ab217471fb80169b217471fb80168b217471fb80167b217471fb80166b2
17471fb80165b217471fb80164b217471fb80163b217471fb80162b21747
1fb80161b217471fb80160b217471fb8015fb217471fb8015eb217471fb8
015db217471fb8015cb217471fb8015bb217471fb8015ab217471fb80159
b217471fb80158b216551fb80157b216551fb80156b216551fb80155b216
551fb80154b216551fb80153b216551fb80152b216551fb80151b216551f
b80150b216551fb8014fb216551fb8014eb216551fb8014db216551fb801
4cb216551fb8014bb216551fb8014ab216551fb80149b216551fb80148b2
16551fb80147b216551fb80146b216551fb80145b216551fb80144b21655
1fb80143b216551fb80142b216551fb80141b216551fb80140b216551fb8
013fb216551fb8013eb216551fb8013db216551fb8013cb216551fb8013b
b216551fb8013ab216551fb80139b216551fb80138b215621fb80137b215
621fb80136b215621fb80135b215621fb80134b215621fb80133b215501f
b80132b215501fb80131b215621fb80130b215621fb8012fb215621fb801
2eb215621fb8012db214221fb8012cb214221fb8012bb213251fb8012ab2
13251fb80129b2122b1fb80128b2122b1fb80127b2122b1fb80126b2122b
1fb80125b2122b1fb80124b2122b1fb80123b2122b1fb80122b2122b1fb8
0121b2122b1fb80120b211351fb8011fb211351fb8011eb211351fb8011d
b210441fb8011cb210441fb8011bb210441fb8011ab210441fb80119b210
441fb80118b210441fb80117b210441fb80116b210441fb80115b210441f
b80114b210441fb80113b210441fb80112b210441fb80111b210441fb801
10b210441fb8010fb210441fb8010eb210441fb8010db210441fb8010cb2
0f4b1fb8010bb20f4b1fb8010ab20f4b1fb80109b20f4b1fb80108b20f4b
1fb80107b20f4b1fb80106b20f4b1fb80105b20f4b1fb80104b20f4b1fb8
0103b20f4b1fb80102b20f4b1fb80101b20f4b1fb8010040ff0f4b1fff0f
4b1ffe0f4b1ffd0f4b1ffc0f4b1ffb0f4b1ffa0f4b1ff90f4b1ff80f4b1f
f70f4b1ff60f4b1ff50f4b1ff40f4b1ff30f4b1ff20f4b1ff10f4b1ff00f
4b1fef0f4b1fee0f4b1fed0f4b1fec0f4b1feb0f4b1fea0f4b1fe90f4b1f
e80f4b1fe70f4b1fe60f4b1fe50f4b1fe40f4b1fe30f4b1fe20f4b1fe10f
4b1fe00f4b1fdf0f4b1fde0f4b1fdd0f4b1fdc0f4b1fdb0f4b1fda0f4b1f
d90f4b1fd80f4b1fd70f4b1fd60f4b1fd50e521fd40e521fd30e521fd20e
521fd10e521fd00e521fcf0e521fce0e521fcd0e521fcc0e521fcb0e521f
ca0e521fc90e521fc80e521fc70e521fc60e521fc50e521fc40e521fc30e
521fc20e521fc10e521f4098c00e521fbf0e521fbe0e521fbd0e521fbc0e
521fbb0e521fba0e521fb90e521fb80e521fb70e521fb60e521fb50e521f
b40e521fb30e521fb20e521fb10d621fb00d621faf0d621fae0d621fad0d
621fac0d621fab0d501faa0d621fa90d621fa80d621fa70d621fa60d621f
a50d621fa40d621fa30d621fa20d621fa10d621fa00d621f9f0d621f9e0d
621f9d0d621f9c0d621f9b0d621fb8028840660d211f9a0c6f1f990c6f1f
980c6f1f970c6f1f960c6f1f950c6f1f940c6f1f930c6f1f920c6f1f910c
6f1f900c6f1f8f0c6f1f8e0b8a1f8d0b8a1f8c0b8a1f101a01701a801a02
70198019022f183f184f18031f172f173f17039f17af170240171b1f4685
03bd0100010000050001019000542b4bb807ff524bb008505bb00188b025
53b00188b040515ab00688b000555a5b58b101018e59b101024354b0114b
515a58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb08053
58b20340401d42594bb0ff5358b20300001d42592b58400f70148014d014
e01404801301a01001b8ffc0b3102c3046b8ffc04022101f2246700f01bf
0f018f0e9f0eaf0e03af0ebf0e02bf0ecf0edf0e03400e3e42462b737475
73752b2b7373731b59012b737574737374002b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b002b2b732b2b2b2b2b2b2b737373747473732b2b73747475
2b742b73742b732b2b2b2b2b2b2b2b732b7373737373737373742b2b2b73
742b737373737473732b732bb1000243545841ff02030064020200640201
00640200006401ff006401fe006401fd006401fb006401fa006401f90064
01f8006401f7006401f6006401f5006401f4006401f3006401f2006401f1
006401f0006401ef006401ee006401ed006401ec006401eb006401ea0064
01e9006401e8006401e7006401e6006401e5006401e4006401e3006401e2
006401e1006401e0006401df006401de006401dd006401dc006401db0064
01da006401d9006401d8006401d7006401d6006401d5006401d4006401d3
006401d2006401d1006401d0006401cf006401ce006401cd006401cc0064
01cb006401ca006401c9006401c8006401c7006401c6006401c5006401c4
006401c3006401c2006401c1006401c0006401bf006401be006401bd0064
01bc006401bb006401ba006401b9006401b8006401b7006401b6006401b5
006401b4006401b3006401b2006401b1006401b0006401af006401ad0064
01ac006401ab006401aa006401a9006401a8006401a7006401a6006401a5
006401a4006401a2006401a1006401a00064019f0064019d0064019c0064
019b0064019a006401990064019800640197006401960064019500640194
006401930064019200640191006401900064018f0064018e0064018d0064
018a00640189006401880064018700640186006401850064018400640183
006401810064017f0064017e0064017d0064017c417d0064017b00640179
0064017800640177006401760064017400640173006401720064016f0064
016e0064016d0064016c0064016b0064016a006401690064016800640167
006401660064016500640164006401630064016200640161006401600064
015f0064015e0064015d0064015c0064015b006401590064015800640157
0064015600640155006401540064015200640151006401500064014f0064
014e0064014d0064014a0064014900640146006401420064014100640140
0064013f0064013d0064013b006401390064013800640137006401360064
013500640134006401330064013200640131006401300064012f0064012e
00642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737474
752b180000>
[16381 15117 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> GAAAAA+Consolas AddT42Char 
1 306 4 <0002000a0000045c051b0007000a00a0b0852b5840120a03040904050802
01090100200706090a08b8010e401c020303092809068f029f0202020204
07064105050401010400000443003f332f11332f11332f3f3312392f5d12
3938332f10ed3201192f33331a18cd327d87c4c40118cd327d87c4c43130
1bb20a0208b8010e40156c03030906020204070641050504010104000004
4300183f332f11332f11332f3f3312392f1239332f2b3230315921230321
03230133130303045cc25bfde05cb901b2f45cdddd011dfee3051bfca102
bbfd4500>GAAAAA+Consolas AddT42Char 
1 962 8 <000100c9000003b0051b000b0058b0852b58b1060ab801a4401401080104
00010c06e309090105e302410ae50143003fed3fed12392fed0110d6ddc4
123910f1c531301b40130906e36c0909010205e36c0241010ae56c014300
183f2b3f2b12392f2b30315921211121152111211521112103b0fd1902e7
fdcb021ffde10235051b96fe6b96fe3e>GAAAAA+Consolas AddT42Char 
1 1620 15 <000100e9000003d9051b00050031b0852b58b9000401a740090001060241
04e50143003fed3f0110d6cde131301bb702410104e56c014300183f2b3f
30315921211133112103d9fd10b5023b051bfb7d>GAAAAA+Consolas AddT42Char 
1 1944 17 <00010077000003f0051b000d0062b0852b58b40108050a0bbb01a4000000
0501a4400f060d41030a030a0807410643010043003f323f3f3339397d2f
7c2f183f012fe12fe13211393931301b400f0d41030a030a000807410643
01004300183f333f3f331239397d2f7c2f183f3031592123010311112311
33011311113303f0e8fe836ea6e5016b83a6032f0106fd6dfe5e051bfcfc
fed502bc0173>GAAAAA+Consolas AddT42Char 
1 2284 19 <0002009e000003f8051b000e00170050b0852b58b9000001c3b30f081407
b801a4400d081814e506060813e109410843003f3fed12392fed0110d6f1
c510d4e131301b400f0614e56c0606080913e16c0941084300183f3f2b12
392f2b30315901140e02232311231121321e0207342623231133323603f8
3c7ec488a2b2017061b28750b9a594b6a69eab038b509d7c4dfe2b051b2b
6098757e86fde68a>GAAAAA+Consolas AddT42Char 
1 2442 20 <00020039fe980466052d00220036007bb0852b58b900140178b30000232d
b801c3b5050113051b0fb801c3400c2305371ba51a17e61e144428b8010d
b50a4232e40044003fed3fed3f2ffdd6ed0110d6d4f1c612393910e11139
2fe131301b400e1a1ba56c1a1e17e66c1e14440a28b8010d40096c0a4200
32e46c004400183f2b3f2b3f2f2bc62b303159052e03353412363633321e
0215140e020716163332363717060623222e0201342e0223220e0215141e
0233323e0201d3689a6632528dbc697ebb7c3d4476a05c0f6e64305d304f
428c4a5086633c019d234e7b5754794e26244d7a56547a4f260c0f66a7e3
8ab20104a9515babf398a0f1a8600f586b20267b362e2c578302e974bf89
4c5089b76777c18a4b508ab9>GAAAAA+Consolas AddT42Char 
1 2724 21 <000200aa0000041b051b001900240079b0852b5840090219010019160900
11b801c4b31a0a1f09b801a440140a251607c4201920190a1ee30b410a43
01430043003f3f3f3fed1239392f2fed390110d6f1c510d4f1c612393911
33113331301b4016162007c46c201920190a0b1ee36c0b410a4301430043
00183f3f3f3f2b1239392f2f2b393031592123032e03232311231121321e
0215140e020716161703342623231133323e02041bc9c3162e353f2754b2
015e72a4693124476944374d284e8377a8903f65472701a2303f2510fdba
051b325a7f4d3d6d594110135f4f02066968fe501d395300>GAAAAA+Consolas AddT42Char 
1 3216 24 <0001006dffee03fa051b0017003eb0852b58bc000001a40015000d01a440
0a0a1817410b4112e20544003fed3f3f0110d6e1d4e131301b400a17410b
410512e26c054400183f2b3f3f30315901140e0223222e0235113311141e
0233323635113303fa3d76ab6f7aaa6b31b21d42694c8e87b201c76caf7b
434075a465036ffc9f4d744e28a495035f00>GAAAAA+Consolas AddT42Char 
1 3354 28 <0001000000000466051b000a0066b0852b58b9000601d9b7050801040301
020abb01d60000000201a6401003030b0c08050104040305410343004100
3f3f3f12392f391239111201392ff1d6e110c510c41139d6e131301b400c
08050104040305410343004100183f3f3f12392f39123930315901011123
110133011737010466fe27b4fe27d7010460580107051bfcb8fe2d01d703
44fe22c0ae01f000>GAAAAA+Consolas AddT42Char 
1 0 0 <000400580000040e051b00030007001f00310099b0852b58b900230199b2
2d0f0db80134b41010081a07be0132000200130140000800010133401004
020d9810102819991a069703410f20b8011db42804960143003ffddefdce
3ffddeed12392fed012fdde1d6e110f1c611392fe1c5d4e131301b401510
0d986c1010281a19996c1a0306976c03410f2820b8011d40096c28400104
966c014300183f2b1ace2bce3f2bce2b12392f2b30315901112111011121
1101140e0223072327333235342e0223233533321e0201321615140e0223
222e0235343e02040efc4a0358fd04026b2042674804640672902a4c6b40
232969996531feb825310d172012121f170e0e171f051bfae5051bfb4104
62fb9e02e82d5541279efc832d48331b64335167fdeb3325121f170e0e17
1f121220180e>GAAAAA+Consolas AddT42Char 
GAAAAA+Consolas /CharStrings get begin
/space 3 def
/A 4 def
/E 8 def
/L 15 def
/N 17 def
/P 19 def
/Q 20 def
/R 21 def
/U 24 def
/Y 28 def
end
GAAAAA+Consolas /Encoding get
dup 32 /space put
dup 65 /A put
dup 69 /E put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 85 /U put
dup 89 /Y put
pop
end
%ADOEndSubsetFont
/UBGDNO+Consolas /GAAAAA+Consolas findfont ct_VMDictPut
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 3{/.notdef}rp /E 6{/.notdef}rp /L 
/.notdef /N /.notdef /P /Q /R 2{/.notdef}rp /U 
3{/.notdef}rp /Y 166{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
380.764 18.3602 mo
(QUERY PLAN)
[9.84604 9.90009 9.90002 9.84607 9.90005 9.90005 9.84607 9.90005 9.90005 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 11806 350 <0001010801cf035e027300030026b0852b58b2030103b901080001002fed
012fcd31301bb10103b80108b16c0100182f2b30315901213521035efdaa
025601cfa400>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/hyphen 350 def
end
UBGDNO+Consolas /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 19{/.notdef}rp /A 3{/.notdef}rp /E 
6{/.notdef}rp /L /.notdef /N /.notdef /P /Q /R 
2{/.notdef}rp /U 3{/.notdef}rp /Y 166{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18.02 0 0 -18.02 0 0 ]msf
5.24377 39.9602 mo
(----------------------------------------------------------------------------------------)
[9.91106 9.91105 9.82096 9.91105 9.91106 9.82095 9.91105 9.91106 9.82095 9.91106 9.91106 9.82095 
9.91106 9.91106 9.82095 9.91106 9.91106 9.82095 9.91106 9.91106 9.82094 9.91107 9.91104 9.82095 
9.91104 9.91107 9.82095 9.91107 9.91104 9.82095 9.91107 9.91104 9.82098 9.91104 9.91104 9.82098 
9.91107 9.91104 9.82098 9.91104 9.91104 9.82098 9.91104 9.91107 9.82095 9.91107 9.91104 9.82098 
9.91101 9.91107 9.82098 9.91107 9.91107 9.82092 9.91107 9.91107 9.82098 9.91101 9.91107 9.82092 
9.91107 9.91107 9.82092 9.91107 9.91101 9.82098 9.91101 9.91107 9.82092 9.91107 9.91107 9.82092 
9.91107 9.91107 9.82092 9.91101 9.91107 9.82092 9.91107 9.91107 9.82092 9.91107 9.91107 9.82092 
9.91101 9.91107 9.82092 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 1218 11 <0001006f000003f8051b000b0056b0852b58b10804b801a4b2050901b801
a4401000050c0b4108e7030305064105430043003f3f3f12392fed3f0110
c62ff1c610f1c531301b400f0b410308e76c03030506410543004300183f
3f3f12392f2b3f30315921231121112311331121113303f8b2fddbb2b202
25b20258fda8051bfdd70229>UBGDNO+Consolas AddT42Char 
1 3512 131 <00020085ffee03c103fe0020002f0084b0852b58b4151509011fb801b0b2
0d2127b801ca400f09300ccc012000220122221a205115b8010240091411
f91a502cf60452003fed3ffdd6ed3f12392f5d1239ed0110d6e1d4c4e139
11392f31301b400d220ccc6c012022221a20511415b80102400e6c141a11
f96c1a50042cf66c045200183f2b3f2bc62b3f12392f12392b3031592127
060623222e02353436333335342623220607353e0333321e021511032322
0e0215141e023332363703250452a95d567a4f25e1dcd0727555a5582151
5a62325b926536afdd415e3c1d1228402e3c9b568751482c4d683d97ab58
596b26239d0c17120b28527c54fd4c01c91a30432a1d352918494f00>UBGDNO+Consolas AddT42Char 
1 5290 138 <000100a0000003c7058500180050b0852b58b10f0bbb01af000c000001af
400f010c19100b05fb15500e530b510051003f3f3f3fed12390110d6d4e1
10f1c431301b400e100b1505fb6c15500e530b51005100183f3f3f3f2b12
39303159212311342623220e02071123113311073e033332161503c7ae57
51233d424e33aeae06294f4f522c96a402817473132f503cfd660585fe67
9e31432a12b7b800>UBGDNO+Consolas AddT42Char 
1 7070 149 <000100b6ffee03bb03fe0035007db0852b58b9002c01b3b51b241b240a00
b801b5b3110a3623ba01000024ffc0400c1219482427f6112c0720500ab8
0105400a9f0baf0b020b0ef80752003ffdd65ded3f123939fdd62bed0110
d6d4e11139392f2fe131301b401323242027f66c112c0720500a0b070ef8
6c075200183f2b32393f1239392b323930315901140e0423222627351616
33323635342e02272e0335343e023332161715262623220e0215141e0217
1e0303bb243e525d622f66ab5258ae567d781332695b44735430275ea078
3b904e5293364159371815396652597a4c2101123554412e1e0e1214a019
1a443f1b2b272a1b1433465e402a6456390d109b141314232f1b1b2c2929
181a39465800>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/H 11 def
/a 131 def
/h 138 def
/s 149 def
end
UBGDNO+Consolas /Encoding get
dup 72 /H put
dup 97 /a put
dup 104 /h put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 19{/.notdef}rp /A 3{/.notdef}rp /E 
2{/.notdef}rp /H 3{/.notdef}rp /L /.notdef /N /.notdef /P 
/Q /R 2{/.notdef}rp /U 3{/.notdef}rp /Y 7{/.notdef}rp /a 
6{/.notdef}rp /h 10{/.notdef}rp /s 140{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
5.24377 61.5802 mo
(Hash )
[9.90005 9.90006 9.84605 9.90005 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 12036 383 <0001012cfe5c036205d1000d0028b0852b58b20d0802b801b3b40a076d00
56003f3f012fe1d6c431301bb3076d005600183f3f303159010011343e02
3717001114121702f9fe33316db38065fe7cc4c0fe5c01ab020579f1f2f2
7767fe81fe2ee8fe54be>UBGDNO+Consolas AddT42Char 
1 12136 384 <00010104fe5c033a05d1000d0028b0852b58b20d0802b801b4b40b075600
6d003f3f012fe1d6c431301bb30756006d00183f3f303159010011140e02
07273612351001016d01cd2c6ab38865c3c0fe7d05d1fe55fdf56ce8f3fa
7e67c101a4e601dc017c>UBGDNO+Consolas AddT42Char 
1 11696 348 <00010185ffee02d1013b0013002cb0852b58bc00050203000f0000012cb1
0a52003fed012fe131301bb10a00b8012cb26c0a5200183f2b3031590132
1e0215140e0223222e0235343e02022b223d2d1a1a2d3d22233c2d1a1a2d
3c013b1a2e3d23223c2d1a1a2d3c22233d2e1a00>UBGDNO+Consolas AddT42Char 
1 13424 616 <00010087000003e50521000a0068b0852b58b306010a09b801be400b0703
030b0c06ed05050104b8011cb308620903b8011ab10164003fed323fed12
392fed111201392f33e1c4ddc631301b40090506ed6c0505010804b8011c
b56c0862090103b8011ab26c016400183f2b323f2b12392f2b3031592121
35211105272533112103e5fccb0150fec74001a09a0124a203baaa94dbfb
8100>UBGDNO+Consolas AddT42Char 
1 13576 617 <00010093000003f0052d00200062b0852b58b9000801bcb519111911201f
b801e3400c0121100df304080014630220b8011bb10064003fed323f1239
39fdc60110d6e1cd39392f2fe131301b400d10140df36c04080014630200
20b8011bb26c006400183f2b323f1239392bc6303159212135013e033534
2e022322060727363633321e0215140e0207072103f0fca3015253683a14
1a36563c538839604ac180578f683928517b54ed027b9c01505278635833
305742264a3b734e5e34628e594b807f8851e700>UBGDNO+Consolas AddT42Char 
1 13776 618 <000100a4ffee03d7052d00360097b0852b58b9001e0192400d2f32172f24
172f2f1724030900b80191401d1109373218c71137af170117172a3725f1
2421f02a6308f4090cf00565003ffdd6ed3ffdd6ed1112392f5d1239ed39
0110d6d6e11117392f2f2f11123910e131301b4021321718c76c11371717
2a372425f16c242a21f06c2a630908f46c09050cf06c056500183f2bc62b
3f2bc62b1112392f12392b3930315901140e022322262735161633323e02
35342e0223233533323e0235342623220607353e0333321e02151406071e
0303d7468cd48d4e7c363e8a48628b58283057794895973b614525807c42
8c50224d4d4c23689e6a36736433634f31018d569771410a089c0b0c2342
5e3b3650361b8f1f3a553669601a1a980c130d072d54784b70982d08304b
6600>UBGDNO+Consolas AddT42Char 
1 14078 619 <0002002b00000431051b000a000d006fb0852b5840090c06070b06050b09
02b8018e40150d03030005060d0d09f2040b080000030708620364003f3f
3312392f123933ed321133012fc4392f33e1323311331133113331301b40
12060d0d0009f26c040b08000003070862036400183f3f3312392f123933
2b32113330315901231123112135013311330101210431dfb2fd8b022dfa
dffe6ffe3901c70121fedf0121990361fc9f02b9fd47>UBGDNO+Consolas AddT42Char 
1 14250 620 <000100b2ffee03cf051b00210072b0852b58b9001c015db6171a171a170b
00b801bb400d130b2216ee1c1c221bf118620ab80119b40b0ef00565003f
fdd6ed3fed12392fed0110d6d6e11139392f2f10e131301b400f1c16ee6c
1c1c22181bf16c18620b0ab80119b76c0b050ef06c056500183f2bc62b3f
2b12392f2b30315901140e0223222e022735161633323e02353426232311
2115211133321e0203cf5493c8741d43423f19368b4750805a30afa4f802
c0fde4725eb28b5501a261a07340030506049e0d0c2647653f7a6f029c98
fe9122558f00>UBGDNO+Consolas AddT42Char 
1 14466 621 <0002007bffee0400051b002100350076b0852b58b11a2cb80190b40a1212
0a00b801914015220a362ced1a27c61d1d36190513f1126231c70565003f
ed3fed123912392feddded0110d6d4e111392f10e13231301b401c1a2ced
6c1a1d401d27c66c1d1d3619051213f16c12620531c76c056500183f2b3f
2b123912392f2b1a10cd2b30315901140e0223222e0235343e0433331523
220e020707363633321e0207342e0223220e0207141e0233323e02040041
78a9676ca6703a1a3c6495ca85818c75ac743e08043fa56063956332b61d
3e5f42264e4b441c24476844395f4527019e5a9e7543458fda9564bca68a
6337983866905929252d3a6790613c6143250e19201281ad682c25486700
>UBGDNO+Consolas AddT42Char 
1 14838 623 <00030077ffee03f0052d0021002f004300c1b0852b58bc0028018f001000
22018e400a1a0d1d1a101a101a0a00bb01bd0030003a01bc40210a441d0d
2deb353515052d281d35300d303a2822153a0d0d0525eb15633fee056500
3fed3fed1239192f391239391133111239c51139111239182fed39390110
d6e1d4e11139392f2f12393910e110e131301b40251d0d352deb6c353515
052d281d35300d303a2822153a0d0d051525eb6c1563053fee6c05650018
3f2b3f2b1239192f391239391133111239c51139111239182f2b39393031
5901140e0223222e0235343637262635343e0233321e02151406071e0303
342623220615141e0217363613342e02270e0315141e0233323e0203f044
7aa6616ba36e38868c807634699e6b659968347f753a644a29cf7d71707d
1e3f5e41716e12183e6850445d391827445e37355e452801485381582e30
56764778ae47419f673f765c372b50724672a03c1d46566a026359575656
27423a381d3573fd9b254644442421414348282d453018162d45>UBGDNO+Consolas AddT42Char 
1 15224 624 <00020064000003e9052d001f00330070b0852b58b306061600b80190b20e
2f25b80192401316342fec0e2ac60c11110620c71b6307f10664003fed3f
ed12392f39eddded0110d6e1d432e111392f31301b401b0e2fec6c0e1140
112ac66c0c1111061b20c76c1b630607f16c066400183f2b3f2b12392f39
2b1a10cd2b303159011402060423233533323e023737060623222e023534
3e0233321e0201220e0215141e0233323e0237342e0203e95cb4fef6ae6d
7981bc7d4208043fa460639663324277a66461a57844fe36385f45281d3d
6042254f4b441b26486702d7bffeedb154983465915d29252d3a688f545b
9e7544408fe40124254768433d6043240e18201281ad692c>UBGDNO+Consolas AddT42Char 
2 5008 688 <00020085012a03e10319000300070034b0852b58400a0703050105f80703
f801002fedd6ed012fc4ddc431301b400b0705f86c07010103f86c010018
2f2b10c62b303159012135211121352103e1fca4035cfca4035c028693fe
1193>UBGDNO+Consolas AddT42Char 
1 1470 13 <000100b6fff2036d051b0015004db0852b58b9000101a7400912140c1613
e715410bb80118b40c0fe80644003ffdd6ed3fed0110d6c6d6e131301bb7
1513e76c15410c0bb80118b76c0c060fe86c064400183f2bc62b3f2b3031
590111140e0223222e022735161633323635112135036d32669a6827514b
42183e974a6d76fe0f051bfc74549770420b131b10b32d34857d02f29a00
>UBGDNO+Consolas AddT42Char 
1 3986 133 <0001009efff203ac03fa001d0068b0852b58b20f0017b801b7b2061e0eb8
010940097f0f010f12f90b5000b80107b7701d011d1afa0352003ffdd65d
ed3ffdd65ded0110d6e1d4c431301bb10f0eb80109400a6c0f0b12f96c0b
501d00b80107b76c1d031afa6c035200183f2bc62b3f2bc62b3031592506
0623220035343e023332161715262623220e021514163332363703ac448f
4ceefeff4a86ba704e883e41874843775a34b19d47853e251a190102f877
c28a4b1619a6221f33608a57b6b52020>UBGDNO+Consolas AddT42Char 
1 4182 134 <0002006dffee03c1058500140021005cb0852b58b10c0bb801b0b2081b15
b801b340110022080d0518fa10520b510a531ff50550003fed3f3f3fed12
39390110d6e1d4c4e13931301b4013080d051018fa6c10520b510a53051f
f56c055000183f2b3f3f3f2b12393930315913343e023332161711331123
27060623222e02371416333236371126262322066d4681b56f305d2daf9c
0649aa635683572cb26b624293512b68338e9f01e180c789470c0d01a6fa
7bbe6a664883b87bb6b3767401d21415b800>UBGDNO+Consolas AddT42Char 
1 5448 139 <000200ac000003d105910009001d006eb0852b58bc000f01fd0019000401
b1400e090109010906071e0409f607510ab80128400a14401014481400f5
034f003fedde2bed3fed320110d6cd39392f2f10e1d4e131301b40090407
09f66c0751140ab80128400a6c1403400300f56c034f00183f2b1a10ce2b
3f2b323031590121352111211521352113321e0215140e0223222e023534
3e0201f6fed701d9012bfcdb014a3d1d3225151525321d1d322515152532
035c90fca5919105001526311d1c3226151526321c1d31261500>UBGDNO+Consolas AddT42Char 
1 6166 144 <000100a0000003c703fe00170050b0852b58b10216bb01af0017000b01af
400f0c1718020017510b5110fb0750004f003f3fed3f3f12390110d6d4e1
10e13931301b400e020017510b510710fb6c0750004f00183f3f2b3f3f12
393031591333173e0333321615112311342623220e02071123a09b072c52
4f522c9b9fae5857203d424d30ae03eca234452a11b7b8fd710281767113
2f503cfd6600>UBGDNO+Consolas AddT42Char 
1 6322 145 <0002005cffee040a03fe001300270040b0852b58bc000001b30014001e01
b3400a0a2819f90f5023f80552003fed3fed0110d6e1d4e131301b400c0f
19f96c0f500523f86c055200183f2b3f2b30315901140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e02040a427cb2716cab
773f427cb2716cab773fb2294c6d434e6f4721294c6c444e6f472101fe75
c38b4d4382c07d75c18b4d4381c0845d8b5d2f3d66874a5d8c5d2f3d6687
>UBGDNO+Consolas AddT42Char 
1 6916 148 <000100c90000040803fe00130056b0852b58b10212bb01b10013000801b1
4010091314021108080013510cfb0550004f003f3fed3f12392f39390110
d6d4e110e13931301b400f02110808001351050cfb6c0550004f00183f3f
2b3f12392f393930315913331736363332160723362623220e02071123c9
9f0559ad589ca106b003535023474b5430b003ecb96b60cac78477193756
3dfd7b00>UBGDNO+Consolas AddT42Char 
1 7346 150 <0001003ffff203c9052d00170060b0852b58b1100db801af40160a070708
170f08180710f70c0a0d4f00fb1714f80352003ffdd6ed3f33cded320110
d6d4c4123910c4f1c531301b4015070d10f76c0c400a0d4f1700fb6c1703
14f86c035200183f2bc62b3f331acd2b3230315925060623222635112135
211137112115211114163332363703c93b7e41bdbafee70119ae01c3fe3d
737030723e0e0f0dabb1020c9201142dfebf92fe026c6b0f1000>UBGDNO+Consolas AddT42Char 
1 7802 153 <000100250000044203ec001200c2b0852b584027050406060c0c0b070a0a
0b0b09080401111110030402020f0f101012000e0d040413140e04200abe
ffe00011ffe0000fffe0000cffe040170b100c0f110a04070d0d0709084f
06075102015112004f003f323f333f333f3312392f173938383838383311
120139192f333318c43239192f331133111239113311331810c43239192f
3311331133113311123931301b40180e0b100c0f110a04070d0d0709084f
06075102015112004f00183f333f333f333f3312392f1739333031590103
2303270703230333131737133313173713044292d3911d218bcd91aa5412
2b927d9d2d0f4e03ecfc1401a4666cfe6203ecfd56988501c3fe43858d02
af00>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/parenleft 383 def
/parenright 384 def
/period 348 def
/one 616 def
/two 617 def
/three 618 def
/four 619 def
/five 620 def
/six 621 def
/eight 623 def
/nine 624 def
/equal 688 def
/J 13 def
/c 133 def
/d 134 def
/i 139 def
/n 144 def
/o 145 def
/r 148 def
/t 150 def
/w 153 def
end
UBGDNO+Consolas /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 74 /J put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
2{/.notdef}rp /one /two /three /four /five /six /.notdef 
/eight /nine 3{/.notdef}rp /equal 3{/.notdef}rp /A 3{/.notdef}rp /E 
2{/.notdef}rp /H /.notdef /J /.notdef /L /.notdef /N 
/.notdef /P /Q /R 2{/.notdef}rp /U 3{/.notdef}rp /Y 
7{/.notdef}rp /a /.notdef /c /d 3{/.notdef}rp /h /i 
4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp 
/w 136{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
54.7038 61.5802 mo
(Join  \(cost=18.93..32426.58 rows=61 width=28\))
[9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84605 9.90007 9.90005 9.84604 9.90005 9.90005 
9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90009 9.90002 
9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90009 9.90002 
9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90002 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
25.0438 83.1802 mo
(Hash )
[9.90005 9.90005 9.90005 9.90005 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 11510 347 <0002019affee02cd03fe001300270044b0852b58b10519b80201b20f2314
b8012ab21e520ab8012ab10050003fed3fed012fc4f1c631301bb11e14b8
012ab46c1e52000ab8012ab26c005000183f2b3f2b30315901321e021514
0e0223222e0235343e0213321e0215140e0223222e0235343e0202331f38
2a19192a381f20372a18182a37201f382a19192a381f20372a18182a3703
fe192a381f20372a18182a37201f382a19fd23192a381f20372a18182a37
201f382a1900>UBGDNO+Consolas AddT42Char 
1 758 6 <0001005cfff003e3052b001c0070b0852b58b30e1c1e16b801c7b2051d0d
b80117b44f0e010e11b8010db20a4200bb0113001c0019010eb10244003f
fdd6ed3ffdd65ded0110d6e110d6c431301bb10e0db80117b36c0e0a11b8
010db46c0a421c00b80113b36c1c0219b8010eb26c024400183f2bc62b3f
2bc62b303159250623200011343e023332161715262623220e0215141233
32363703e39dacfeebfed75298d8865b9c4847985a5c956838cec7549a47
3141014b01449dfeb1601f20af27294583bd79fefefe2723>UBGDNO+Consolas AddT42Char 
1 12452 591 <00010000fe660466fef600030022b0852b58b5030203f50155003fed012f
cd31301bb50103f56c015500183f2b303159012135210466fb9a0466fe66
9000>UBGDNO+Consolas AddT42Char 
1 4380 135 <00020075ffee03f003fe001e0029006eb0852b58b30c0c1500b801b6b31f
152904b801b74015152a1fcd8f040104042a24d11a500dd50c07f6105200
3ffdd6ed3fed12392f5ded0110d6f1c410dde111392f31301b4018041fcd
6c04042a1a24d16c1a500c0dd56c0c1007f66c105200183f2bc62b3f2b12
392f2b3031590114060721141633323e023715060623222e0235343e0233
321e0207362e0223220e020703f00202fd3faca22c58524b2047b36081ba
77393d75aa6c69a26f39b50320436442395e442a05022b2532169aa5070c
0f098f14194685c17a6abd8f544279ad52436f502d2c50704300>UBGDNO+Consolas AddT42Char 
1 5918 143 <0001005a0000040c03fe002d0076b0852b58b11d18b801afb21a0d01b801
afb22d250bb801af40170d0d2e2f06f62a5013f622501d251a1b4f1a510d
510051003f3f3f3f1239393fed3fed111201392ff139d4e110d4e1393130
1b40172a06f66c2a502213f66c22501d251a1b4f1a510d51005100183f3f
3f3f1239393f2b3f2b3031592111342e0223220e0207112311342e022322
0e020711231133173e03333216153e0333321111036c070f17111422272f
209f070f18111220273021a085081a31343b245154182e35402abd02d12f
3c230e18365941fd7b02be3744260e14345a46fd7b03ecbf395031176a6f
3451371dfeddfd25>UBGDNO+Consolas AddT42Char 
1 6502 146 <000200a0fe6603fa03fe001400250062b0852b58b30d0a2008b801afb20a
2600b801b3401115080d260c1afd10500c4f095523d30552003fed3f3f3f
ed11123939012fe110d6f1c5123931301b4014080d260c101afd6c10500c
4f09550523d36c055200183f2b3f3f3f2b1112393930315901140e022322
26271123113317363633321e0207342e0223220e020711161633323603fa
4b84b469305f31ae9b0b4baa635682582cb217324e36214449512e306a33
8da0020886c884420a0cfe5c0586a867534883b97a4f845e351531513cfe
191417bf>UBGDNO+Consolas AddT42Char 
1 8384 155 <0001003bfe60041d03ec00180088b0852b58400d14131800201209011616
191a15b8ffe0b5161514125109b80103400f0a0dff013004010656131414
18004f003f32322f333f393938fdd6ed3f1239393811120139192f3318c4
331acd32cd3231301bb616151412510a09b8010340116c0a060dff6c0401
00065613141418004f00183f33332f333f1239392bc62b3f123939303159
01010e032322262735161633323e0237013313173713041dfeaa357186a0
631a2a1916341d30534a4420fe6fc6fe333aeb03ecfc7e89c67f3c02029e
03051c3f644703ecfd689ca00294>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/colon 347 def
/C 6 def
/underscore 591 def
/e 135 def
/m 143 def
/p 146 def
/y 155 def
end
UBGDNO+Consolas /Encoding get
dup 58 /colon put
dup 67 /C put
dup 95 /underscore put
dup 101 /e put
dup 109 /m put
dup 112 /p put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
2{/.notdef}rp /one /two /three /four /five /six /.notdef 
/eight /nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A /.notdef 
/C /.notdef /E 2{/.notdef}rp /H /.notdef /J /.notdef 
/L /.notdef /N /.notdef /P /Q /R 2{/.notdef}rp 
/U 3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef 
/c /d /e 2{/.notdef}rp /h /i 3{/.notdef}rp /m 
/n /o /p /.notdef /r /s /t 2{/.notdef}rp 
/w /.notdef /y 134{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
74.4438 83.1802 mo
(Cond: \(mc.company_type_id = ct.id\))
[9.90005 9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84605 9.90005 
9.90005 9.84605 9.90005 9.90005 9.84607 9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 9.90005 
9.90005 9.84607 9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 9.90002 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
25.0438 104.78 mo
(-)sh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
2 5100 692 <000100d1fff003dd045200050026b0852b58b9000501eeb5020400010352
003fc4012fc4dde131301bb201035200183fc4303159133701012701d16c
02a0fd606c022103e36ffdcffdcf6e01c100>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/greater 692 def
end
UBGDNO+Consolas /Encoding get
dup 62 /greater put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
2{/.notdef}rp /one /two /three /four /five /six /.notdef 
/eight /nine /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp /A 
/.notdef /C /.notdef /E 2{/.notdef}rp /H /.notdef /J 
/.notdef /L /.notdef /N /.notdef /P /Q /R 
2{/.notdef}rp /U 3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a 
/.notdef /c /d /e 2{/.notdef}rp /h /i 3{/.notdef}rp 
/m /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
34.8838 104.78 mo
(>  )
[9.92005 9.92006 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 12692 613 <00030058ffee040e052d00130021002f0086b0852b58b11822b8018db20a
2600b8018db3140a3017bb011b00260025011c4011182214182618261805
2bee0f631dee0565003fed3fed1239392f2f12393910ed10ed0110d6d4e1
3310e13231301bb12617b8011bb26c1825b8011c40156c22141826182618
050f2bee6c0f63051dee6c056500183f2b3f2b1239392f2f1239392b2b30
315901140e0223222e0235343e0233321e0207342627011e0333323e0225
141617012e0323220e02040e3c7ab57a69ac7a423d79b67969ac7a42b005
03fdd70f2e415335446f4e2afdaa010302290f2e405233446f4e2a028d96
f7b1614fa4feae96f8b1614fa5feb4224320fe6534583f234282c18b1f3e
1d019933543d224283c1>UBGDNO+Consolas AddT42Char 
1 14736 622 <00010075000003e9051b0006003eb0852b58b70302010100040003b8011a
b40562020164003f333fed32012fc43911333231301bb2000503b8011ab5
6c056202016400183f333f2b323031590101230121352103e9fddcc70239
fd3e03740479fb870479a200>UBGDNO+Consolas AddT42Char 
1 2958 22 <0001006fffee03e5052d00350070b0852b58b12600bb01c40013002d01c4
b30a1c3626ba010f0027ffc0400c111648272ae72d130521420ab80116b4
0b0eea0544003ffdd6ed3f123939fdd62bed0110d6c4e1d4f1c431301b40
132627212ae76c2d130521420a0b050eea6c054400183f2b32393f123939
2b323930315901140e0223222e022735161633323e0235342e0635343e02
33321e021715262623220615141e0603e54c88bf7334675f54224bbb7756
794d233b607b807b603b3876b980214d4f4d214d9a4899903b607b807b60
3b01625d8c5d2e080c1009ac1c201b354c31354b3b31343d53704d438265
3e060b0e08a016176656354c3c31343e5572>UBGDNO+Consolas AddT42Char 
1 5802 142 <000100ac000003d1058500090048b0852b58b9000401b140110901090109
06070a0409f6075100d50353003fed3fed320110d6cd39392f2f10e13130
1b400d040709f66c07510300d56c035300183f2b3f2b3230315901213521
11211521352101f6fed701d9012bfcdb014a04f68ffb0c919100>UBGDNO+Consolas AddT42Char 
1 6716 147 <0002006dfe6603c103fe00130022005cb0852b58b1080ab801b0b20c1c14
b801b3401100230d092419fa0f520a55095020d40550003fed3f3f3fed11
12390110d6e1d4c4e13931301b40130d09240f19fa6c0f520a5509500520
d46c055000183f2b3f3f3f2b11123930315913343e023332161737112311
370623222e0237141e02333236371126262322066d3977ba813364389aaf
098ec45882572bb219334d34429351286539939a01e16cc29356101127fa
68017bd7ca4884b87a54865d32767401d21318c2>UBGDNO+Consolas AddT42Char 
1 7672 152 <000100420000041d03ec00080057b0852b58400f05060100200807030309
0a7a030103b8ffd0400903070851060605004f003f32322f3f3339385d11
120139192f33331a18cd32cd3231301b400a0300070851060605004f0018
3f33332f3f33123930315913331317371333012342c6f63537f4bffe76c8
03ecfd68a2a60294fc14>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/zero 613 def
/seven 622 def
/S 22 def
/l 142 def
/q 147 def
/v 152 def
end
UBGDNO+Consolas /Encoding get
dup 48 /zero put
dup 55 /seven put
dup 83 /S put
dup 108 /l put
dup 113 /q put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /eight /nine /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp 
/A /.notdef /C /.notdef /E 2{/.notdef}rp /H /.notdef 
/J /.notdef /L /.notdef /N /.notdef /P /Q 
/R /S /.notdef /U 3{/.notdef}rp /Y 5{/.notdef}rp /underscore 
/.notdef /a /.notdef /c /d /e 2{/.notdef}rp /h 
/i 2{/.notdef}rp /l /m /n /o /p /q 
/r /s /t /.notdef /v /w /.notdef /y 
134{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
64.5438 104.78 mo
(Parallel Seq Scan on movie_companies mc  \(cost=0.00..32379.21 rows=10772 width=32\))
[9.90005 9.90005 9.84606 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 
9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 
9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 
9.90005 9.90005 9.84604 9.90005 9.90009 9.84601 9.90009 9.90002 9.84607 9.90009 9.90002 9.84607 
9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 9.90002 9.90009 9.84607 9.90002 9.90009 9.84607 
9.90002 9.90009 9.84607 9.90009 9.90002 9.84607 9.90009 9.90002 9.84613 9.90002 9.90009 9.84607 
9.90002 9.90009 9.84607 9.90009 9.90002 9.84607 9.90009 9.90002 9.84613 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 1098 9 <000100cd000003ae051b0009004cb0852b58b40309070206b801a8400d07
0a02e205050701e508410743003f3fed12392fed0110d6f1c510c4393130
1b400f0502e26c0505070801e56c0841074300183f3f2b12392f2b303159
0121112115211123112103aefdd5020efdf2b602e10483fe5895fdba051b
>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/F 9 def
end
UBGDNO+Consolas /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /eight /nine /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp 
/A /.notdef /C /.notdef /E /F /.notdef /H 
/.notdef /J /.notdef /L /.notdef /N /.notdef /P 
/Q /R /S /.notdef /U 3{/.notdef}rp /Y 5{/.notdef}rp 
/underscore /.notdef /a /.notdef /c /d /e 2{/.notdef}rp 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/q /r /s /t /.notdef /v /w /.notdef 
/y 134{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
84.3438 126.38 mo
(Filter)
[9.84605 9.90005 9.90005 9.84607 9.90005 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
2 4648 681 <00050014fff204520593000300170027003b004b008db0852b58410b0028
015f003c0044015f00320004015f00180020015f401c0e01020003023fb2
3747b22d5223b2091bb213540353025101510053003f3f3f3f3fedd4ed3f
edd4ed012f2f3311332fe1d4e12fe1d4e131301b4020373fb26c372d2d47
b26c2d520923b26c0913131bb26c1354035302510151005300183f3f3f3f
3f2b10c42b3f2b10c42b3031590101230101140e0223222e0235343e0233
321e0207342623220e0215141633323e0201140e0223222e0235343e0233
321e0207342623220e0215141633323e020452fc66a40398fe912647653e
3d6145252647653e3d6145259340391d2d1f1040391d2d1f100298274765
3e3d6145252647653e3d6245259341391d2d1f1040391d2d20100585fa7b
0585fee8416f512f264b6e48406f522e264a6e4d58541a2e3f2558541a2e
3ffcde416e522e264a6f48406f522e264b6e4c58541a2e3f2558541a2e3f
>UBGDNO+Consolas AddT42Char 
1 12514 592 <000101c103b002a605850003002ab0852b58b9000001ebb6030304050103
53003fcd111201392fe131301bb30140035300183f1acd30315901032303
02a61dac1c0585fe2b01d500>UBGDNO+Consolas AddT42Char 
1 8074 154 <000100460000042903ec000b00f9b0852b58b12308b8ffe8401e23230220
2301000d03040c090a0706090a4f0707064f0303045101010051003f322f
3f332f3f332f3f33012f332f3310c63210c6324b5258b40201060a030f1b
400c0201060a030a020106235201102b870ec4107d8708c45900384b5258
b405010609040f1b400c050106090409050106235201102b870ec4107d87
08c4594b5258b408000709040f1b400c080007090409080007235200102b
870ec4107d8708c45900384b5258b40b00070a030f1b400c0b00070a030a
0b0007235200102b870ec4107d8708c45931301b400f090a4f0707064f03
0304510101005100183f332f3f332f3f332f3f3330315921230101230101
33010133010429e7fef1fef4e10185fe8ddf01080103d7fe87017ffe8101
f801f4fe7e0182fe0800>UBGDNO+Consolas AddT42Char 
1 12268 588 <000100400158042602f2001f005bb0852b58bc00000185001f000f0185b2
10201cb80103400b0fb005c005d00503051f0cb901030015002fedc4dd5d
c4ed0110d6e1d4e131301bb1051cb80103b76c0f05401f15150cb80103b1
6c1500182f2b10c41addc42b30315901160e0223222e042322061523263e
0233321e043332363504250122486b4737584b3f3d3c223b39a00223476b
4737584b3f3d3c223f3602b84c815e3525384238255e654c815f35253842
38255c66>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/percent 681 def
/quotesingle 592 def
/x 154 def
/asciitilde 588 def
end
UBGDNO+Consolas /Encoding get
dup 37 /percent put
dup 39 /quotesingle put
dup 120 /x put
dup 126 /asciitilde put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent /.notdef /quotesingle /parenleft /parenright 
3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 2{/.notdef}rp 
/equal /greater 2{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /.notdef /H /.notdef /J /.notdef /L /.notdef 
/N /.notdef /P /Q /R /S /.notdef /U 
3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /.notdef 
/v /w /x /y 4{/.notdef}rp /asciitilde 129{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
143.624 126.38 mo
(: \(\(note\)::text ~~ '%\(co)
[9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84607 9.90002 9.90009 
9.84604 9.90005 9.90005 9.84604 9.90009 9.90002 9.84607 9.90002 9.90009 9.84604 9.90005 0 
]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
380.764 126.38 mo
(-)sh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 7522 151 <000100a0ffee03c703ec0016004eb0852b58b10200bb01af0014000d01af
400e0a170200154f0c4f0ffa07520051003f3fed3f3f12390110d6e1d4e1
3931301b400e0200154f0c4f070ffa6c0752005100183f3f2b3f3f123930
31592123270e03232226351133111433323e0237113303c79c062d515051
2d9b9eaeae203d434d30aea234452a11b6b80290fd7ee7132f503d029a00
>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/u 151 def
end
UBGDNO+Consolas /Encoding get
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent /.notdef /quotesingle /parenleft /parenright 
3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 2{/.notdef}rp 
/equal /greater 2{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /.notdef /H /.notdef /J /.notdef /L /.notdef 
/N /.notdef /P /Q /R /S /.notdef /U 
3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y 4{/.notdef}rp /asciitilde 129{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
390.604 126.38 mo
(production\)%'::text\))
[9.90005 9.90005 9.84607 9.90002 9.90009 9.84604 9.90005 9.90002 9.84607 9.90009 9.90002 9.84607 
9.90009 9.90002 9.84607 9.90002 9.90009 9.84601 9.90009 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
25.0438 147.98 mo
(-)sh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
34.8838 147.98 mo
(>  )
[9.92005 9.92006 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
64.5438 147.98 mo
(Hash  \(cost=18.88..18.88 rows=4 width=4\))
[9.90005 9.90005 9.84606 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 
9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 
9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 
9.90005 9.90005 9.84604 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
64.5438 169.58 mo
(-)sh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
74.4438 169.58 mo
(>  )
[9.90005 9.84605 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
104.084 169.58 mo
(Seq Scan on company_type ct  \(cost=0.00..18.88 rows=4 width=4\))
[9.90005 9.84605 9.90005 9.90005 9.84605 9.90005 9.90005 9.84607 9.90005 9.90005 9.84604 9.90005 
9.90005 9.84607 9.90002 9.90009 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90002 
9.90009 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84604 9.90005 9.90005 9.84607 9.90002 
9.90012 9.84601 9.90009 9.90002 9.84607 9.90002 9.90002 9.84607 9.90009 9.90009 9.84601 9.90009 
9.90002 9.84607 9.90002 9.90002 9.84607 9.90002 9.90015 9.84607 9.90002 9.90002 9.84607 9.90002 
9.90002 0 ]xsh
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
123.824 191.18 mo
(Filter)
[9.90005 9.90005 9.84605 9.90005 9.90005 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal UBGDNO+Consolas gcheck setglobal} if
1 5654 141 <000100b6000004270585000a0062b0852b58b9000801ecb30909000abe01
de0007000301af0004000001f1401001040b094f020a0703040553045100
51003f3f3f1217393f0110d6d4e110f1c5e012392fe131301b400d094f02
0a07030405530451005100183f3f3f1217393f3031592123011123113311
0133010427effe2caeae01c3e6fe29021afde60585fc9c01cbfe3100>UBGDNO+Consolas AddT42Char 
UBGDNO+Consolas /CharStrings get begin
/k 141 def
end
UBGDNO+Consolas /Encoding get
dup 107 /k put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/UBGDNO+Consolas*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent /.notdef /quotesingle /parenleft /parenright 
3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 2{/.notdef}rp 
/equal /greater 2{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /.notdef /H /.notdef /J /.notdef /L /.notdef 
/N /.notdef /P /Q /R /S /.notdef /U 
3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i /.notdef /k /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y 4{/.notdef}rp /asciitilde 129{/.notdef}rp]
UBGDNO+Consolas nf
UBGDNO+Consolas*1 [18 0 0 -18 0 0 ]msf
183.104 191.18 mo
(: \(\(kind\)::text = 'production companies'::text\))
[9.90005 9.90005 9.84605 9.90005 9.90005 9.84607 9.90002 9.90009 9.84604 9.90005 9.90005 9.84604 
9.90009 9.90002 9.84607 9.90005 9.90005 9.84607 9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 
9.90005 9.90005 9.84607 9.90002 9.90009 9.84607 9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 
9.90009 9.90002 9.84607 9.90002 9.90009 9.84601 9.90009 9.90002 9.84607 9.90009 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/UBGDNO+Consolas*1 uf
/UBGDNO+Consolas uf
/GAAAAA+Consolas uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
